#!/usr/bin/env python

# Copyright 2017 DIANA-HEP
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import unittest
from collections import namedtuple

import numpy
from rolup.typesystem import *
from rolup.typesystem.arrayname import ArrayName
from rolup.typesystem.columns import type2columns, columns2type

class TestTypesystem(unittest.TestCase):
    def runTest(self):
        pass

    def test_representations(self):
        # R
        self.assertEqual(Record(), Record())
        self.assertEqual(Record(x=int32, y=float64), Record(x=int32, y=float64))
        self.assertNotEqual(Record(x=int32, y=float64), Record(x=int32))
        self.assertNotEqual(Record(x=int32), Record(x=int32, y=float64))
        self.assertNotEqual(Record(x=int32, y=float64), Record(y=float64))
        self.assertNotEqual(Record(y=float64), Record(x=int32, y=float64))
        self.assertNotEqual(Record(x=int32, y=float64), Record(y=int32, x=float64))

        self.assertEqual(Record(x=int32, y=List(float64)), Record(x=int32, y=List(float64)))
        self.assertEqual(List(Record(x=int32, y=float64)), List(Record(x=int32, y=float64)))
        self.assertNotEqual(List(Record(x=int32, y=float64)), Record(x=int32, y=List(float64)))

        self.assertEqual(Record(x=int32, y=Option(float64)), Record(x=int32, y=Option(float64)))
        self.assertEqual(Option(Record(x=int32, y=float64)), Option(Record(x=int32, y=float64)))
        self.assertNotEqual(Option(Record(x=int32, y=float64)), Record(x=int32, y=Option(float64)))

        self.assertEqual(Record(x=int32, y=Union(int8, uint16)), Record(x=int32, y=Union(int8, uint16)))
        self.assertEqual(Record(x=int32, y=Union(int8, uint16)), Record(x=int32, y=Union(uint16, int8)))

        self.assertEqual(Record(int32, float64), Record(**{"0": int32, "1": float64}))
        self.assertEqual(Record(int32, x=float64), Record(**{"0": int32, "x": float64}))

        # O
        self.assertEqual(Option(boolean), Option(boolean))
        self.assertNotEqual(Option(boolean), boolean)
        self.assertNotEqual(boolean, Option(boolean))

        self.assertEqual(Option(boolean), Option(Primitive(numpy.dtype(numpy.bool))))
        self.assertNotEqual(Option(boolean), Primitive(numpy.dtype(numpy.bool)))
        self.assertNotEqual(boolean, Option(Primitive(numpy.dtype(numpy.bool))))

        self.assertEqual(Option(Option(boolean)), Option(Option(boolean)))
        self.assertEqual(Option(Option(boolean)), Option(boolean))
        self.assertEqual(Option(boolean), Option(Option(boolean)))
        self.assertNotEqual(Option(Option(boolean)), boolean)
        self.assertNotEqual(boolean, Option(Option(boolean)))

        # L
        self.assertEqual(List(boolean), List(boolean))
        self.assertNotEqual(List(boolean), boolean)
        self.assertNotEqual(boolean, List(boolean))

        self.assertEqual(List(boolean), List(Primitive(numpy.dtype(numpy.bool))))
        self.assertNotEqual(List(boolean), Primitive(numpy.dtype(numpy.bool)))
        self.assertNotEqual(boolean, List(Primitive(numpy.dtype(numpy.bool))))

        self.assertEqual(List(List(boolean)), List(List(boolean)))
        self.assertNotEqual(List(List(boolean)), List(boolean))
        self.assertNotEqual(List(boolean), List(List(boolean)))

        # U
        self.assertEqual(Union(), Union())
        self.assertEqual(Union(int8, uint16), Union(int8, uint16))
        self.assertEqual(Union(int8, uint16), Union(uint16, int8))
        self.assertNotEqual(Union(int8, uint16), Union(int8, float64))
        self.assertNotEqual(Union(int8, uint16), Union(float64, int8))
        self.assertNotEqual(Union(int8, int16), int16)
        self.assertNotEqual(Union(int8, int16), Union(int16))
        self.assertEqual(Union(int16), Union(int16))

        # P
        self.assertEqual(boolean, Primitive(numpy.dtype(numpy.bool)))

        self.assertEqual(int8, Primitive(numpy.dtype(numpy.int8)))
        self.assertEqual(int16, Primitive(numpy.dtype(numpy.int16)))
        self.assertEqual(int32, Primitive(numpy.dtype(numpy.int32)))
        self.assertEqual(int64, Primitive(numpy.dtype(numpy.int64)))

        self.assertEqual(uint8, Primitive(numpy.dtype(numpy.uint8)))
        self.assertEqual(uint16, Primitive(numpy.dtype(numpy.uint16)))
        self.assertEqual(uint32, Primitive(numpy.dtype(numpy.uint32)))
        self.assertEqual(uint64, Primitive(numpy.dtype(numpy.uint64)))

        self.assertEqual(float32, Primitive(numpy.dtype(numpy.float32)))
        self.assertEqual(float64, Primitive(numpy.dtype(numpy.float64)))
        self.assertEqual(float128, Primitive(numpy.dtype(numpy.float128)))

        self.assertEqual(complex64, Primitive(numpy.dtype(numpy.complex64)))
        self.assertEqual(complex128, Primitive(numpy.dtype(numpy.complex128)))
        self.assertEqual(complex256, Primitive(numpy.dtype(numpy.complex256)))

        self.assertNotEqual(boolean, Primitive(numpy.dtype(numpy.int8)))
        self.assertNotEqual(int8, Primitive(numpy.dtype(numpy.bool)))
        self.assertNotEqual(boolean, Primitive(numpy.dtype(numpy.uint8)))
        self.assertNotEqual(uint8, Primitive(numpy.dtype(numpy.bool)))

    def test_json(self):
        # R
        self.assertEqual(Record(), Type.fromJsonString(Record().toJsonString()))
        self.assertEqual(Record(x=int32, y=float64), Type.fromJsonString(Record(x=int32, y=float64).toJsonString()))
        self.assertNotEqual(Record(x=int32, y=float64), Type.fromJsonString(Record(x=int32).toJsonString()))
        self.assertNotEqual(Record(x=int32), Type.fromJsonString(Record(x=int32, y=float64).toJsonString()))
        self.assertNotEqual(Record(x=int32, y=float64), Type.fromJsonString(Record(y=float64).toJsonString()))
        self.assertNotEqual(Record(y=float64), Type.fromJsonString(Record(x=int32, y=float64).toJsonString()))
        self.assertNotEqual(Record(x=int32, y=float64), Type.fromJsonString(Record(y=int32, x=float64).toJsonString()))

        self.assertEqual(Record(x=int32, y=List(float64)), Type.fromJsonString(Record(x=int32, y=List(float64)).toJsonString()))
        self.assertEqual(List(Record(x=int32, y=float64)), Type.fromJsonString(List(Record(x=int32, y=float64)).toJsonString()))
        self.assertNotEqual(List(Record(x=int32, y=float64)), Type.fromJsonString(Record(x=int32, y=List(float64)).toJsonString()))

        self.assertEqual(Record(x=int32, y=Option(float64)), Type.fromJsonString(Record(x=int32, y=Option(float64)).toJsonString()))
        self.assertEqual(Option(Record(x=int32, y=float64)), Type.fromJsonString(Option(Record(x=int32, y=float64)).toJsonString()))
        self.assertNotEqual(Option(Record(x=int32, y=float64)), Type.fromJsonString(Record(x=int32, y=Option(float64)).toJsonString()))

        self.assertEqual(Record(x=int32, y=Union(int8, uint16)), Type.fromJsonString(Record(x=int32, y=Union(int8, uint16)).toJsonString()))
        self.assertEqual(Record(x=int32, y=Union(int8, uint16)), Type.fromJsonString(Record(x=int32, y=Union(uint16, int8)).toJsonString()))

        self.assertEqual(Record(int32, float64), Type.fromJsonString(Record(**{"0": int32, "1": float64}).toJsonString()))
        self.assertEqual(Record(int32, x=float64), Type.fromJsonString(Record(**{"0": int32, "x": float64}).toJsonString()))

        # O
        self.assertEqual(Option(boolean), Type.fromJsonString(Option(boolean).toJsonString()))
        self.assertNotEqual(Option(boolean), Type.fromJsonString(boolean.toJsonString()))
        self.assertNotEqual(boolean, Type.fromJsonString(Option(boolean).toJsonString()))

        self.assertEqual(Option(boolean), Type.fromJsonString(Option(Primitive(numpy.dtype(numpy.bool))).toJsonString()))
        self.assertNotEqual(Option(boolean), Type.fromJsonString(Primitive(numpy.dtype(numpy.bool)).toJsonString()))
        self.assertNotEqual(boolean, Type.fromJsonString(Option(Primitive(numpy.dtype(numpy.bool))).toJsonString()))

        self.assertEqual(Option(Option(boolean)), Type.fromJsonString(Option(Option(boolean)).toJsonString()))
        self.assertEqual(Option(Option(boolean)), Type.fromJsonString(Option(boolean).toJsonString()))
        self.assertEqual(Option(boolean), Type.fromJsonString(Option(Option(boolean)).toJsonString()))
        self.assertNotEqual(Option(Option(boolean)), Type.fromJsonString(boolean.toJsonString()))
        self.assertNotEqual(boolean, Type.fromJsonString(Option(Option(boolean)).toJsonString()))

        # L
        self.assertEqual(List(boolean), Type.fromJsonString(List(boolean).toJsonString()))
        self.assertNotEqual(List(boolean), Type.fromJsonString(boolean.toJsonString()))
        self.assertNotEqual(boolean, Type.fromJsonString(List(boolean).toJsonString()))

        self.assertEqual(List(boolean), Type.fromJsonString(List(Primitive(numpy.dtype(numpy.bool))).toJsonString()))
        self.assertNotEqual(List(boolean), Type.fromJsonString(Primitive(numpy.dtype(numpy.bool)).toJsonString()))
        self.assertNotEqual(boolean, Type.fromJsonString(List(Primitive(numpy.dtype(numpy.bool))).toJsonString()))

        self.assertEqual(List(List(boolean)), Type.fromJsonString(List(List(boolean)).toJsonString()))
        self.assertNotEqual(List(List(boolean)), Type.fromJsonString(List(boolean).toJsonString()))
        self.assertNotEqual(List(boolean), Type.fromJsonString(List(List(boolean)).toJsonString()))

        # U
        self.assertEqual(Union(), Type.fromJsonString(Union().toJsonString()))
        self.assertEqual(Union(int8, uint16), Type.fromJsonString(Union(int8, uint16).toJsonString()))
        self.assertEqual(Union(int8, uint16), Type.fromJsonString(Union(uint16, int8).toJsonString()))
        self.assertNotEqual(Union(int8, uint16), Type.fromJsonString(Union(int8, float64).toJsonString()))
        self.assertNotEqual(Union(int8, uint16), Type.fromJsonString(Union(float64, int8).toJsonString()))
        self.assertNotEqual(Union(int8, int16), Type.fromJsonString(int16.toJsonString()))
        self.assertNotEqual(Union(int8, int16), Type.fromJsonString(Union(int16).toJsonString()))
        self.assertEqual(Union(int16), Type.fromJsonString(Union(int16).toJsonString()))

        # P
        self.assertEqual(boolean, Type.fromJsonString(Primitive(numpy.dtype(numpy.bool)).toJsonString()))

        self.assertEqual(int8, Type.fromJsonString(Primitive(numpy.dtype(numpy.int8)).toJsonString()))
        self.assertEqual(int16, Type.fromJsonString(Primitive(numpy.dtype(numpy.int16)).toJsonString()))
        self.assertEqual(int32, Type.fromJsonString(Primitive(numpy.dtype(numpy.int32)).toJsonString()))
        self.assertEqual(int64, Type.fromJsonString(Primitive(numpy.dtype(numpy.int64)).toJsonString()))

        self.assertEqual(uint8, Type.fromJsonString(Primitive(numpy.dtype(numpy.uint8)).toJsonString()))
        self.assertEqual(uint16, Type.fromJsonString(Primitive(numpy.dtype(numpy.uint16)).toJsonString()))
        self.assertEqual(uint32, Type.fromJsonString(Primitive(numpy.dtype(numpy.uint32)).toJsonString()))
        self.assertEqual(uint64, Type.fromJsonString(Primitive(numpy.dtype(numpy.uint64)).toJsonString()))

        self.assertEqual(float32, Type.fromJsonString(Primitive(numpy.dtype(numpy.float32)).toJsonString()))
        self.assertEqual(float64, Type.fromJsonString(Primitive(numpy.dtype(numpy.float64)).toJsonString()))
        self.assertEqual(float128, Type.fromJsonString(Primitive(numpy.dtype(numpy.float128)).toJsonString()))

        self.assertEqual(complex64, Type.fromJsonString(Primitive(numpy.dtype(numpy.complex64)).toJsonString()))
        self.assertEqual(complex128, Type.fromJsonString(Primitive(numpy.dtype(numpy.complex128)).toJsonString()))
        self.assertEqual(complex256, Type.fromJsonString(Primitive(numpy.dtype(numpy.complex256)).toJsonString()))

        self.assertNotEqual(boolean, Type.fromJsonString(Primitive(numpy.dtype(numpy.int8)).toJsonString()))
        self.assertNotEqual(int8, Type.fromJsonString(Primitive(numpy.dtype(numpy.bool)).toJsonString()))
        self.assertNotEqual(boolean, Type.fromJsonString(Primitive(numpy.dtype(numpy.uint8)).toJsonString()))
        self.assertNotEqual(uint8, Type.fromJsonString(Primitive(numpy.dtype(numpy.bool)).toJsonString()))

        self.assertEqual(boolean, Type.fromJsonString(boolean.toJsonString()))

        self.assertEqual(int8, Type.fromJsonString(int8.toJsonString()))
        self.assertEqual(int16, Type.fromJsonString(int16.toJsonString()))
        self.assertEqual(int32, Type.fromJsonString(int32.toJsonString()))
        self.assertEqual(int64, Type.fromJsonString(int64.toJsonString()))

        self.assertEqual(uint8, Type.fromJsonString(uint8.toJsonString()))
        self.assertEqual(uint16, Type.fromJsonString(uint16.toJsonString()))
        self.assertEqual(uint32, Type.fromJsonString(uint32.toJsonString()))
        self.assertEqual(uint64, Type.fromJsonString(uint64.toJsonString()))

        self.assertEqual(float32, Type.fromJsonString(float32.toJsonString()))
        self.assertEqual(float64, Type.fromJsonString(float64.toJsonString()))
        self.assertEqual(float128, Type.fromJsonString(float128.toJsonString()))

        self.assertEqual(complex64, Type.fromJsonString(complex64.toJsonString()))
        self.assertEqual(complex128, Type.fromJsonString(complex128.toJsonString()))
        self.assertEqual(complex256, Type.fromJsonString(complex256.toJsonString()))

        self.assertNotEqual(boolean, Type.fromJsonString(int8.toJsonString()))
        self.assertNotEqual(int8, Type.fromJsonString(boolean.toJsonString()))
        self.assertNotEqual(boolean, Type.fromJsonString(uint8.toJsonString()))
        self.assertNotEqual(uint8, Type.fromJsonString(boolean.toJsonString()))

    def test_arrayname(self):
        self.assertEqual(ArrayName("prefix"), ArrayName.parse(str(ArrayName("prefix")), "prefix"))

        self.assertEqual(ArrayName("prefix").toRecord("x"), ArrayName.parse(str(ArrayName("prefix").toRecord("x")), "prefix"))
        self.assertEqual(ArrayName("prefix").toOptionSize(), ArrayName.parse(str(ArrayName("prefix").toOptionSize()), "prefix"))
        self.assertEqual(ArrayName("prefix").toOptionOffset(), ArrayName.parse(str(ArrayName("prefix").toOptionOffset()), "prefix"))
        self.assertEqual(ArrayName("prefix").toOptionData(), ArrayName.parse(str(ArrayName("prefix").toOptionData()), "prefix"))
        self.assertEqual(ArrayName("prefix").toListSize(), ArrayName.parse(str(ArrayName("prefix").toListSize()), "prefix"))
        self.assertEqual(ArrayName("prefix").toListOffset(), ArrayName.parse(str(ArrayName("prefix").toListOffset()), "prefix"))
        self.assertEqual(ArrayName("prefix").toListData(), ArrayName.parse(str(ArrayName("prefix").toListData()), "prefix"))
        self.assertEqual(ArrayName("prefix").toUnionTag(), ArrayName.parse(str(ArrayName("prefix").toUnionTag()), "prefix"))
        self.assertEqual(ArrayName("prefix").toUnionOffset(), ArrayName.parse(str(ArrayName("prefix").toUnionOffset()), "prefix"))
        self.assertEqual(ArrayName("prefix").toUnionData(3), ArrayName.parse(str(ArrayName("prefix").toUnionData(3)), "prefix"))

        self.assertEqual(ArrayName("prefix").toListData().toRecord("x"), ArrayName.parse(str(ArrayName("prefix").toListData().toRecord("x")), "prefix"))
        self.assertEqual(ArrayName("prefix").toListData().toOptionSize(), ArrayName.parse(str(ArrayName("prefix").toListData().toOptionSize()), "prefix"))
        self.assertEqual(ArrayName("prefix").toListData().toOptionOffset(), ArrayName.parse(str(ArrayName("prefix").toListData().toOptionOffset()), "prefix"))
        self.assertEqual(ArrayName("prefix").toListData().toOptionData(), ArrayName.parse(str(ArrayName("prefix").toListData().toOptionData()), "prefix"))
        self.assertEqual(ArrayName("prefix").toListData().toListSize(), ArrayName.parse(str(ArrayName("prefix").toListData().toListSize()), "prefix"))
        self.assertEqual(ArrayName("prefix").toListData().toListOffset(), ArrayName.parse(str(ArrayName("prefix").toListData().toListOffset()), "prefix"))
        self.assertEqual(ArrayName("prefix").toListData().toListData(), ArrayName.parse(str(ArrayName("prefix").toListData().toListData()), "prefix"))
        self.assertEqual(ArrayName("prefix").toListData().toUnionTag(), ArrayName.parse(str(ArrayName("prefix").toListData().toUnionTag()), "prefix"))
        self.assertEqual(ArrayName("prefix").toListData().toUnionOffset(), ArrayName.parse(str(ArrayName("prefix").toListData().toUnionOffset()), "prefix"))
        self.assertEqual(ArrayName("prefix").toListData().toUnionData(3), ArrayName.parse(str(ArrayName("prefix").toListData().toUnionData(3)), "prefix"))

        self.assertNotEqual(ArrayName("prefix").toOptionData().toRecord("x"), ArrayName.parse(str(ArrayName("prefix").toListData().toRecord("x")), "prefix"))
        self.assertNotEqual(ArrayName("prefix").toOptionData().toOptionSize(), ArrayName.parse(str(ArrayName("prefix").toListData().toOptionSize()), "prefix"))
        self.assertNotEqual(ArrayName("prefix").toOptionData().toOptionOffset(), ArrayName.parse(str(ArrayName("prefix").toListData().toOptionOffset()), "prefix"))
        self.assertNotEqual(ArrayName("prefix").toOptionData().toOptionData(), ArrayName.parse(str(ArrayName("prefix").toListData().toOptionData()), "prefix"))
        self.assertNotEqual(ArrayName("prefix").toOptionData().toListSize(), ArrayName.parse(str(ArrayName("prefix").toListData().toListSize()), "prefix"))
        self.assertNotEqual(ArrayName("prefix").toOptionData().toListOffset(), ArrayName.parse(str(ArrayName("prefix").toListData().toListOffset()), "prefix"))
        self.assertNotEqual(ArrayName("prefix").toOptionData().toListData(), ArrayName.parse(str(ArrayName("prefix").toListData().toListData()), "prefix"))
        self.assertNotEqual(ArrayName("prefix").toOptionData().toUnionTag(), ArrayName.parse(str(ArrayName("prefix").toListData().toUnionTag()), "prefix"))
        self.assertNotEqual(ArrayName("prefix").toOptionData().toUnionOffset(), ArrayName.parse(str(ArrayName("prefix").toListData().toUnionOffset()), "prefix"))
        self.assertNotEqual(ArrayName("prefix").toOptionData().toUnionData(3), ArrayName.parse(str(ArrayName("prefix").toListData().toUnionData(3)), "prefix"))

    def test_columns(self):
        print "HERE"
        print type2columns(boolean, "prefix")

        self.assertEqual(boolean, columns2type(type2columns(boolean, "prefix"), "prefix"))



    def test_contain_element_others(self):
        type123 = namedtuple("type123", ["one", "two", "three"])
        type13 = namedtuple("type13", ["one", "three"])
        type0 = namedtuple("type0", [])

        # R
        self.assertTrue({"one": 1, "two": 2.2, "three": None} in Record(one=int32, two=float64, three=Option(uint8)))
        self.assertTrue({"one": 1, "two": None, "three": None} not in Record(one=int32, two=float64, three=Option(uint8)))
        self.assertTrue({"one": 1, "three": None} not in Record(one=int32, two=float64, three=Option(uint8)))
        self.assertTrue({"one": 1, "two": None, "three": None} in Record(one=int32, three=Option(uint8)))
        self.assertTrue({"one": 1, "three": None} in Record(one=int32, three=Option(uint8)))
        self.assertTrue({"one": 1, "two": None, "three": None} in Record())
        self.assertTrue({"one": 1, "three": None} in Record())
        self.assertTrue({} in Record())
        self.assertTrue({} not in Record(one=int32, two=float64, three=Option(uint8)))

        self.assertTrue(type123(1, 2.2, None) in Record(one=int32, two=float64, three=Option(uint8)))
        self.assertTrue(type123(1, None, None) not in Record(one=int32, two=float64, three=Option(uint8)))
        self.assertTrue(type13(1, None) not in Record(one=int32, two=float64, three=Option(uint8)))
        self.assertTrue(type123(1, None, None) in Record(one=int32, three=Option(uint8)))
        self.assertTrue(type13(1, None) in Record(one=int32, three=Option(uint8)))
        self.assertTrue(type123(1, None, None) in Record())
        self.assertTrue(type13(1, None) in Record())
        self.assertTrue(type0() in Record())
        self.assertTrue(type0() not in Record(one=int32, two=float64, three=Option(uint8)))

        # O
        self.assertTrue(None in Option(uint8))
        self.assertTrue(0 in Option(uint8))
        self.assertTrue(False not in Option(uint8))
        self.assertTrue([] not in Option(uint8))

        # L
        self.assertTrue([] in List(uint8))
        self.assertTrue(None not in List(uint8))
        self.assertTrue({} not in List(uint8))
        self.assertTrue([0] in List(uint8))
        self.assertTrue([False] not in List(uint8))

        # U
        self.assertTrue(0 in Union(int8, uint16))
        self.assertTrue(300 in Union(int8, uint16))
        self.assertTrue(-127 in Union(int8, uint16))
        self.assertTrue(-300 not in Union(int8, uint16))
        self.assertTrue(3.14 not in Union(int8, uint16))
        self.assertTrue(False not in Union(int8, uint16))
        self.assertTrue([] not in Union(int8, uint16))
        self.assertTrue(None not in Union(int8, uint16))
        self.assertTrue(type0() not in Union(int8, uint16))

        self.assertTrue(0 in Union(Option(int8), uint16))
        self.assertTrue(300 in Union(Option(int8), uint16))
        self.assertTrue(-127 in Union(Option(int8), uint16))
        self.assertTrue(-300 not in Union(Option(int8), uint16))
        self.assertTrue(3.14 not in Union(Option(int8), uint16))
        self.assertTrue(False not in Union(Option(int8), uint16))
        self.assertTrue([] not in Union(Option(int8), uint16))
        self.assertTrue(None in Union(Option(int8), uint16))
        self.assertTrue(type0() not in Union(Option(int8), uint16))

    def test_contain_element_primitives(self):
        inf = float("inf")
        nan = float("nan")

        # P
        self.assertTrue(False in boolean)
        self.assertTrue(True in boolean)
        self.assertTrue(0 not in boolean)
        self.assertTrue(1 not in boolean)
        self.assertTrue(0.0 not in boolean)
        self.assertTrue(inf not in boolean)
        self.assertTrue(-inf not in boolean)
        self.assertTrue(nan not in boolean)
        self.assertTrue(1+1j not in boolean)
        self.assertTrue(inf+1j not in boolean)

        self.assertTrue(0 in int8)
        self.assertTrue(127 in int8)
        self.assertTrue(128 not in int8)
        self.assertTrue(-128 in int8)
        self.assertTrue(-129 not in int8)
        self.assertTrue(0.0 not in int8)
        self.assertTrue(inf not in int8)
        self.assertTrue(-inf not in int8)
        self.assertTrue(nan not in int8)
        self.assertTrue(1+1j not in int8)
        self.assertTrue(inf+1j not in int8)
        self.assertTrue(False not in int8)
        self.assertTrue(True not in int8)

        self.assertTrue(0 in int16)
        self.assertTrue(32767 in int16)
        self.assertTrue(32768 not in int16)
        self.assertTrue(-32768 in int16)
        self.assertTrue(-32769 not in int16)
        self.assertTrue(0.0 not in int16)
        self.assertTrue(inf not in int16)
        self.assertTrue(-inf not in int16)
        self.assertTrue(nan not in int16)
        self.assertTrue(1+1j not in int16)
        self.assertTrue(inf+1j not in int16)
        self.assertTrue(False not in int16)
        self.assertTrue(True not in int16)

        self.assertTrue(0 in int32)
        self.assertTrue(2147483647 in int32)
        self.assertTrue(2147483648 not in int32)
        self.assertTrue(-2147483648 in int32)
        self.assertTrue(-2147483649 not in int32)
        self.assertTrue(0.0 not in int32)
        self.assertTrue(inf not in int32)
        self.assertTrue(-inf not in int32)
        self.assertTrue(nan not in int32)
        self.assertTrue(1+1j not in int32)
        self.assertTrue(inf+1j not in int32)
        self.assertTrue(False not in int32)
        self.assertTrue(True not in int32)

        self.assertTrue(0 in int64)
        self.assertTrue(9223372036854775807 in int64)
        self.assertTrue(9223372036854775808 not in int64)
        self.assertTrue(-9223372036854775808 in int64)
        self.assertTrue(-9223372036854775809 not in int64)
        self.assertTrue(0.0 not in int64)
        self.assertTrue(inf not in int64)
        self.assertTrue(-inf not in int64)
        self.assertTrue(nan not in int64)
        self.assertTrue(1+1j not in int64)
        self.assertTrue(inf+1j not in int64)
        self.assertTrue(False not in int64)
        self.assertTrue(True not in int64)

        self.assertTrue(0 in uint8)
        self.assertTrue(255 in uint8)
        self.assertTrue(256 not in uint8)
        self.assertTrue(-1 not in uint8)
        self.assertTrue(0.0 not in uint8)
        self.assertTrue(inf not in uint8)
        self.assertTrue(-inf not in uint8)
        self.assertTrue(nan not in uint8)
        self.assertTrue(1+1j not in uint8)
        self.assertTrue(inf+1j not in uint8)
        self.assertTrue(False not in uint8)
        self.assertTrue(True not in uint8)

        self.assertTrue(0 in uint16)
        self.assertTrue(65535 in uint16)
        self.assertTrue(65536 not in uint16)
        self.assertTrue(-1 not in uint16)
        self.assertTrue(0.0 not in uint16)
        self.assertTrue(inf not in uint16)
        self.assertTrue(-inf not in uint16)
        self.assertTrue(nan not in uint16)
        self.assertTrue(1+1j not in uint16)
        self.assertTrue(inf+1j not in uint16)
        self.assertTrue(False not in uint16)
        self.assertTrue(True not in uint16)

        self.assertTrue(0 in uint32)
        self.assertTrue(4294967295 in uint32)
        self.assertTrue(4294967296 not in uint32)
        self.assertTrue(-1 not in uint32)
        self.assertTrue(0.0 not in uint32)
        self.assertTrue(inf not in uint32)
        self.assertTrue(-inf not in uint32)
        self.assertTrue(nan not in uint32)
        self.assertTrue(1+1j not in uint32)
        self.assertTrue(inf+1j not in uint32)
        self.assertTrue(False not in uint32)
        self.assertTrue(True not in uint32)

        self.assertTrue(0 in uint64)
        self.assertTrue(18446744073709551615 in uint64)
        self.assertTrue(18446744073709551616 not in uint64)
        self.assertTrue(-1 not in uint64)
        self.assertTrue(0.0 not in uint64)
        self.assertTrue(inf not in uint64)
        self.assertTrue(-inf not in uint64)
        self.assertTrue(nan not in uint64)
        self.assertTrue(1+1j not in uint64)
        self.assertTrue(inf+1j not in uint64)
        self.assertTrue(False not in uint64)
        self.assertTrue(True not in uint64)

        self.assertTrue(0 in float32)
        self.assertTrue(1 in float32)
        self.assertTrue(0.0 in float32)
        self.assertTrue(1.0 in float32)
        self.assertTrue(inf in float32)
        self.assertTrue(-inf in float32)
        self.assertTrue(nan in float32)
        self.assertTrue(1+1j not in float32)
        self.assertTrue(inf+1j not in float32)
        self.assertTrue(False not in float32)
        self.assertTrue(True not in float32)

        self.assertTrue(0 in float64)
        self.assertTrue(1 in float64)
        self.assertTrue(0.0 in float64)
        self.assertTrue(1.0 in float64)
        self.assertTrue(inf in float64)
        self.assertTrue(-inf in float64)
        self.assertTrue(nan in float64)
        self.assertTrue(1+1j not in float64)
        self.assertTrue(inf+1j not in float64)
        self.assertTrue(False not in float64)
        self.assertTrue(True not in float64)

        self.assertTrue(0 in float128)
        self.assertTrue(1 in float128)
        self.assertTrue(0.0 in float128)
        self.assertTrue(1.0 in float128)
        self.assertTrue(inf in float128)
        self.assertTrue(-inf in float128)
        self.assertTrue(nan in float128)
        self.assertTrue(1+1j not in float128)
        self.assertTrue(inf+1j not in float128)
        self.assertTrue(False not in float128)
        self.assertTrue(True not in float128)

        self.assertTrue(0 in complex64)
        self.assertTrue(1 in complex64)
        self.assertTrue(0.0 in complex64)
        self.assertTrue(1.0 in complex64)
        self.assertTrue(inf in complex64)
        self.assertTrue(-inf in complex64)
        self.assertTrue(nan in complex64)
        self.assertTrue(1+1j in complex64)
        self.assertTrue(inf+1j in complex64)
        self.assertTrue(False not in complex64)
        self.assertTrue(True not in complex64)

        self.assertTrue(0 in complex128)
        self.assertTrue(1 in complex128)
        self.assertTrue(0.0 in complex128)
        self.assertTrue(1.0 in complex128)
        self.assertTrue(inf in complex128)
        self.assertTrue(-inf in complex128)
        self.assertTrue(nan in complex128)
        self.assertTrue(1+1j in complex128)
        self.assertTrue(inf+1j in complex128)
        self.assertTrue(False not in complex128)
        self.assertTrue(True not in complex128)

        self.assertTrue(0 in complex256)
        self.assertTrue(1 in complex256)
        self.assertTrue(0.0 in complex256)
        self.assertTrue(1.0 in complex256)
        self.assertTrue(inf in complex256)
        self.assertTrue(-inf in complex256)
        self.assertTrue(nan in complex256)
        self.assertTrue(1+1j in complex256)
        self.assertTrue(inf+1j in complex256)
        self.assertTrue(False not in complex256)
        self.assertTrue(True not in complex256)

    def test_contain_set_others(self):
        # R
        self.assertTrue (Record(one=int32, two=float64, three=Option(uint8)).issubtype(Record(one=int32, two=float64, three=Option(uint8))))
        self.assertTrue (Record(one=int32, two=float64, three=Option(uint8)).issubtype(Record(one=int64, two=float64, three=Option(uint8))))
        self.assertFalse(Record(one=int64, two=float64, three=Option(uint8)).issubtype(Record(one=int32, two=float64, three=Option(uint8))))
        self.assertFalse(Record(one=int32, two=Option(float64), three=Option(uint8)).issubtype(Record(one=int32, two=float64, three=Option(uint8))))
        self.assertFalse(Record(one=int32, two=float64, three=Option(uint8)).issubtype(Record(one=int32, two=Option(float64), three=Option(uint8))))
        self.assertTrue (Record(one=int32, two=float64, three=Option(uint8)).issubtype(Record(one=int32, three=Option(uint8))))
        self.assertFalse(Record(one=int32, three=Option(uint8)).issubtype(Record(one=int32, two=float64, three=Option(uint8))))
        self.assertTrue (Record(one=int32, two=float64, three=Option(uint8)).issubtype(Record()))
        self.assertFalse(Record().issubtype(Record(one=int32, two=float64, three=Option(uint8))))
        self.assertTrue (Record().issubtype(Record()))

        # O
        self.assertTrue (Option(uint8).issubtype(Option(uint8)))
        self.assertTrue (Option(uint8).issubtype(Option(uint64)))
        self.assertFalse(Option(uint64).issubtype(Option(uint8)))
        self.assertFalse(uint64.issubtype(Option(uint8)))
        self.assertFalse(List(uint64).issubtype(Option(uint8)))

        # L
        self.assertTrue (List(uint8).issubtype(List(uint8)))
        self.assertTrue (List(uint8).issubtype(List(uint64)))
        self.assertFalse(List(uint64).issubtype(List(uint8)))
        self.assertFalse(uint64.issubtype(List(uint8)))
        self.assertFalse(Option(uint64).issubtype(List(uint8)))

        # U
        self.assertTrue (Union(int8, uint16).issubtype(Union(int8, uint16)))
        self.assertTrue (Union(int8, uint16).issubtype(Union(int8, uint16, float64)))
        self.assertFalse(Union(int8, uint16, float64).issubtype(Union(int8, uint16)))
        self.assertTrue (Union(int8, uint16).issubtype(int32))
        self.assertFalse(Union(int8, uint16).issubtype(uint8))
        self.assertTrue (int8.issubtype(Union(int8, uint16)))
        self.assertTrue (uint8.issubtype(Union(int8, uint16)))
        self.assertFalse(uint32.issubtype(Union(int8, uint16)))

    def test_contain_set_primitives(self):
        # P
        self.assertTrue (boolean.issubtype(boolean))
        self.assertFalse(boolean.issubtype(int8))
        self.assertFalse(boolean.issubtype(int16))
        self.assertFalse(boolean.issubtype(int32))
        self.assertFalse(boolean.issubtype(int64))
        self.assertFalse(boolean.issubtype(uint8))
        self.assertFalse(boolean.issubtype(uint16))
        self.assertFalse(boolean.issubtype(uint32))
        self.assertFalse(boolean.issubtype(uint64))
        self.assertFalse(boolean.issubtype(float32))
        self.assertFalse(boolean.issubtype(float64))
        self.assertFalse(boolean.issubtype(float128))
        self.assertFalse(boolean.issubtype(complex64))
        self.assertFalse(boolean.issubtype(complex128))
        self.assertFalse(boolean.issubtype(complex256))

        self.assertFalse(int8.issubtype(boolean))
        self.assertTrue (int8.issubtype(int8))
        self.assertTrue (int8.issubtype(int16))
        self.assertTrue (int8.issubtype(int32))
        self.assertTrue (int8.issubtype(int64))
        self.assertFalse(int8.issubtype(uint8))
        self.assertFalse(int8.issubtype(uint16))
        self.assertFalse(int8.issubtype(uint32))
        self.assertFalse(int8.issubtype(uint64))
        self.assertTrue (int8.issubtype(float32))
        self.assertTrue (int8.issubtype(float64))
        self.assertTrue (int8.issubtype(float128))
        self.assertTrue (int8.issubtype(complex64))
        self.assertTrue (int8.issubtype(complex128))
        self.assertTrue (int8.issubtype(complex256))

        self.assertFalse(int16.issubtype(boolean))
        self.assertFalse(int16.issubtype(int8))
        self.assertTrue (int16.issubtype(int16))
        self.assertTrue (int16.issubtype(int32))
        self.assertTrue (int16.issubtype(int64))
        self.assertFalse(int16.issubtype(uint8))
        self.assertFalse(int16.issubtype(uint16))
        self.assertFalse(int16.issubtype(uint32))
        self.assertFalse(int16.issubtype(uint64))
        self.assertTrue (int16.issubtype(float32))
        self.assertTrue (int16.issubtype(float64))
        self.assertTrue (int16.issubtype(float128))
        self.assertTrue (int16.issubtype(complex64))
        self.assertTrue (int16.issubtype(complex128))
        self.assertTrue (int16.issubtype(complex256))

        self.assertFalse(int32.issubtype(boolean))
        self.assertFalse(int32.issubtype(int8))
        self.assertFalse(int32.issubtype(int16))
        self.assertTrue (int32.issubtype(int32))
        self.assertTrue (int32.issubtype(int64))
        self.assertFalse(int32.issubtype(uint8))
        self.assertFalse(int32.issubtype(uint16))
        self.assertFalse(int32.issubtype(uint32))
        self.assertFalse(int32.issubtype(uint64))
        self.assertTrue (int32.issubtype(float32))
        self.assertTrue (int32.issubtype(float64))
        self.assertTrue (int32.issubtype(float128))
        self.assertTrue (int32.issubtype(complex64))
        self.assertTrue (int32.issubtype(complex128))
        self.assertTrue (int32.issubtype(complex256))

        self.assertFalse(int64.issubtype(boolean))
        self.assertFalse(int64.issubtype(int8))
        self.assertFalse(int64.issubtype(int16))
        self.assertFalse(int64.issubtype(int32))
        self.assertTrue (int64.issubtype(int64))
        self.assertFalse(int64.issubtype(uint8))
        self.assertFalse(int64.issubtype(uint16))
        self.assertFalse(int64.issubtype(uint32))
        self.assertFalse(int64.issubtype(uint64))
        self.assertTrue (int64.issubtype(float32))
        self.assertTrue (int64.issubtype(float64))
        self.assertTrue (int64.issubtype(float128))
        self.assertTrue (int64.issubtype(complex64))
        self.assertTrue (int64.issubtype(complex128))
        self.assertTrue (int64.issubtype(complex256))

        self.assertFalse(uint8.issubtype(boolean))
        self.assertFalse(uint8.issubtype(int8))
        self.assertTrue (uint8.issubtype(int16))
        self.assertTrue (uint8.issubtype(int32))
        self.assertTrue (uint8.issubtype(int64))
        self.assertTrue (uint8.issubtype(uint8))
        self.assertTrue (uint8.issubtype(uint16))
        self.assertTrue (uint8.issubtype(uint32))
        self.assertTrue (uint8.issubtype(uint64))
        self.assertTrue (uint8.issubtype(float32))
        self.assertTrue (uint8.issubtype(float64))
        self.assertTrue (uint8.issubtype(float128))
        self.assertTrue (uint8.issubtype(complex64))
        self.assertTrue (uint8.issubtype(complex128))
        self.assertTrue (uint8.issubtype(complex256))

        self.assertFalse(uint16.issubtype(boolean))
        self.assertFalse(uint16.issubtype(int8))
        self.assertFalse(uint16.issubtype(int16))
        self.assertTrue (uint16.issubtype(int32))
        self.assertTrue (uint16.issubtype(int64))
        self.assertFalse(uint16.issubtype(uint8))
        self.assertTrue (uint16.issubtype(uint16))
        self.assertTrue (uint16.issubtype(uint32))
        self.assertTrue (uint16.issubtype(uint64))
        self.assertTrue (uint16.issubtype(float32))
        self.assertTrue (uint16.issubtype(float64))
        self.assertTrue (uint16.issubtype(float128))
        self.assertTrue (uint16.issubtype(complex64))
        self.assertTrue (uint16.issubtype(complex128))
        self.assertTrue (uint16.issubtype(complex256))

        self.assertFalse(uint32.issubtype(boolean))
        self.assertFalse(uint32.issubtype(int8))
        self.assertFalse(uint32.issubtype(int16))
        self.assertFalse(uint32.issubtype(int32))
        self.assertTrue (uint32.issubtype(int64))
        self.assertFalse(uint32.issubtype(uint8))
        self.assertFalse(uint32.issubtype(uint16))
        self.assertTrue (uint32.issubtype(uint32))
        self.assertTrue (uint32.issubtype(uint64))
        self.assertTrue (uint32.issubtype(float32))
        self.assertTrue (uint32.issubtype(float64))
        self.assertTrue (uint32.issubtype(float128))
        self.assertTrue (uint32.issubtype(complex64))
        self.assertTrue (uint32.issubtype(complex128))
        self.assertTrue (uint32.issubtype(complex256))

        self.assertFalse(uint64.issubtype(boolean))
        self.assertFalse(uint64.issubtype(int8))
        self.assertFalse(uint64.issubtype(int16))
        self.assertFalse(uint64.issubtype(int32))
        self.assertFalse(uint64.issubtype(int64))
        self.assertFalse(uint64.issubtype(uint8))
        self.assertFalse(uint64.issubtype(uint16))
        self.assertFalse(uint64.issubtype(uint32))
        self.assertTrue (uint64.issubtype(uint64))
        self.assertTrue (uint64.issubtype(float32))
        self.assertTrue (uint64.issubtype(float64))
        self.assertTrue (uint64.issubtype(float128))
        self.assertTrue (uint64.issubtype(complex64))
        self.assertTrue (uint64.issubtype(complex128))
        self.assertTrue (uint64.issubtype(complex256))

        self.assertFalse(float32.issubtype(boolean))
        self.assertFalse(float32.issubtype(int8))
        self.assertFalse(float32.issubtype(int16))
        self.assertFalse(float32.issubtype(int32))
        self.assertFalse(float32.issubtype(int64))
        self.assertFalse(float32.issubtype(uint8))
        self.assertFalse(float32.issubtype(uint16))
        self.assertFalse(float32.issubtype(uint32))
        self.assertFalse(float32.issubtype(uint64))
        self.assertTrue (float32.issubtype(float32))
        self.assertTrue (float32.issubtype(float64))
        self.assertTrue (float32.issubtype(float128))
        self.assertTrue (float32.issubtype(complex64))
        self.assertTrue (float32.issubtype(complex128))
        self.assertTrue (float32.issubtype(complex256))

        self.assertFalse(float64.issubtype(boolean))
        self.assertFalse(float64.issubtype(int8))
        self.assertFalse(float64.issubtype(int16))
        self.assertFalse(float64.issubtype(int32))
        self.assertFalse(float64.issubtype(int64))
        self.assertFalse(float64.issubtype(uint8))
        self.assertFalse(float64.issubtype(uint16))
        self.assertFalse(float64.issubtype(uint32))
        self.assertFalse(float64.issubtype(uint64))
        self.assertFalse(float64.issubtype(float32))
        self.assertTrue (float64.issubtype(float64))
        self.assertTrue (float64.issubtype(float128))
        self.assertTrue (float64.issubtype(complex64))
        self.assertTrue (float64.issubtype(complex128))
        self.assertTrue (float64.issubtype(complex256))

        self.assertFalse(float128.issubtype(boolean))
        self.assertFalse(float128.issubtype(int8))
        self.assertFalse(float128.issubtype(int16))
        self.assertFalse(float128.issubtype(int32))
        self.assertFalse(float128.issubtype(int64))
        self.assertFalse(float128.issubtype(uint8))
        self.assertFalse(float128.issubtype(uint16))
        self.assertFalse(float128.issubtype(uint32))
        self.assertFalse(float128.issubtype(uint64))
        self.assertFalse(float128.issubtype(float32))
        self.assertFalse(float128.issubtype(float64))
        self.assertTrue (float128.issubtype(float128))
        self.assertFalse(float128.issubtype(complex64))
        self.assertTrue (float128.issubtype(complex128))
        self.assertTrue (float128.issubtype(complex256))

        self.assertFalse(complex64.issubtype(boolean))
        self.assertFalse(complex64.issubtype(int8))
        self.assertFalse(complex64.issubtype(int16))
        self.assertFalse(complex64.issubtype(int32))
        self.assertFalse(complex64.issubtype(int64))
        self.assertFalse(complex64.issubtype(uint8))
        self.assertFalse(complex64.issubtype(uint16))
        self.assertFalse(complex64.issubtype(uint32))
        self.assertFalse(complex64.issubtype(uint64))
        self.assertFalse(complex64.issubtype(float32))
        self.assertFalse(complex64.issubtype(float64))
        self.assertFalse(complex64.issubtype(float128))
        self.assertTrue (complex64.issubtype(complex64))
        self.assertTrue (complex64.issubtype(complex128))
        self.assertTrue (complex64.issubtype(complex256))

        self.assertFalse(complex128.issubtype(boolean))
        self.assertFalse(complex128.issubtype(int8))
        self.assertFalse(complex128.issubtype(int16))
        self.assertFalse(complex128.issubtype(int32))
        self.assertFalse(complex128.issubtype(int64))
        self.assertFalse(complex128.issubtype(uint8))
        self.assertFalse(complex128.issubtype(uint16))
        self.assertFalse(complex128.issubtype(uint32))
        self.assertFalse(complex128.issubtype(uint64))
        self.assertFalse(complex128.issubtype(float32))
        self.assertFalse(complex128.issubtype(float64))
        self.assertFalse(complex128.issubtype(float128))
        self.assertFalse(complex128.issubtype(complex64))
        self.assertTrue (complex128.issubtype(complex128))
        self.assertTrue (complex128.issubtype(complex256))

        self.assertFalse(complex256.issubtype(boolean))
        self.assertFalse(complex256.issubtype(int8))
        self.assertFalse(complex256.issubtype(int16))
        self.assertFalse(complex256.issubtype(int32))
        self.assertFalse(complex256.issubtype(int64))
        self.assertFalse(complex256.issubtype(uint8))
        self.assertFalse(complex256.issubtype(uint16))
        self.assertFalse(complex256.issubtype(uint32))
        self.assertFalse(complex256.issubtype(uint64))
        self.assertFalse(complex256.issubtype(float32))
        self.assertFalse(complex256.issubtype(float64))
        self.assertFalse(complex256.issubtype(float128))
        self.assertFalse(complex256.issubtype(complex64))
        self.assertFalse(complex256.issubtype(complex128))
        self.assertTrue (complex256.issubtype(complex256))
